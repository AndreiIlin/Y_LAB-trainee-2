import React from 'react';
import path from 'path';
import { workerData, parentPort } from 'worker_threads';
import { renderToString } from 'react-dom/server';
import { Provider } from 'react-redux';
import { Router } from 'react-router-dom';
import { Helmet } from "react-helmet";
import { ChunkExtractor } from '@loadable/server'
import config from 'config.js';
import store from '@store';
import history from '@app/history';
import api from "@api";
import App from '@app';

store.configure();
api.configure(config.api);
history.configure({...config.routing, initialEntries: ['/']}); // with request url

const jsx = (
  <Provider store={store}>
    <Router history={history}>
      <App />
    </Router>
  </Provider>
);

// This is the stats file generated by webpack loadable plugin
// const statsFile = path.resolve('./dist/node/loadable-stats.json');
// We create an extractor from the statsFile
// const extractor = new ChunkExtractor({ statsFile });

// Wrap your application using "collectChunks"
// const jsx2 = extractor.collectChunks(jsx);
// Render your applicationl

const html = renderToString(jsx);

// const helmetData = Helmet.renderStatic();

// You can now collect your script tags
// const scriptTags = extractor.getScriptTags(); // or extractor.getScriptElements();
// You can also collect your "preload/prefetch" links
// const linkTags = extractor.getLinkTags(); // or extractor.getLinkElements();
// And you can even collect your style tags (if you use "mini-css-extract-plugin")
// const styleTags = extractor.getStyleTags(); // or extractor.getStyleElements();

// console.log({scriptTags, linkTags, styleTags, html, helmetData: helmetData.title.toString()});

parentPort.postMessage({ result: html, status: 200 });
